@model List<SamaraProject1.Models.FeaturedProduct>

@{
    ViewData["Title"] = "Administrar Productos Destacados - Feria Sámara Market";
}

@Html.AntiForgeryToken()

<div class="min-h-screen bg-gradient-to-br from-orange-50 to-orange-100 py-6 sm:py-8 md:py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto">
        <div class="bg-white shadow-2xl rounded-3xl overflow-hidden">
            <div class="px-4 sm:px-6 md:px-8 py-4 sm:py-6 bg-gradient-to-r from-orange-400 to-orange-600">
                <div class="flex flex-col sm:flex-row justify-between items-center">
                    <h1 class="text-2xl sm:text-3xl font-extrabold text-white mb-4 sm:mb-0">Administrar Productos Destacados</h1>
                    <a href="/FeaturedProducts/Add" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-orange-600 bg-white hover:bg-orange-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 transition duration-150 ease-in-out">
                        <svg class="mr-2 -ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                        </svg>
                        Agregar Producto
                    </a>
                </div>
            </div>

            <div class="p-4 sm:p-6 md:p-8 space-y-4 sm:space-y-6">
                @if (TempData["Error"] != null)
                {
                    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 sm:p-4 rounded-r-lg text-sm sm:text-base" role="alert">
                        <p class="font-bold">Error</p>
                        <p>@TempData["Error"]</p>
                    </div>
                }
                @if (TempData["Success"] != null)
                {
                    <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-3 sm:p-4 rounded-r-lg text-sm sm:text-base" role="alert">
                        <p class="font-bold">Éxito</p>
                        <p>@TempData["Success"]</p>
                    </div>
                }

                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                    <div class="p-6">
                        <h2 class="text-lg sm:text-xl font-bold text-gray-900 mb-4">Productos Destacados</h2>
                        <p class="text-sm text-gray-500 mb-4">Administre los productos que se mostrarán en la sección de destacados.</p>

                        <div id="featured-products" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            @if (Model == null || !Model.Any())
                            {
                                <div class="col-span-full text-center py-8 text-gray-500">
                                    No hay productos destacados. Haga clic en "Agregar Producto" para comenzar.
                                </div>
                            }
                            else
                            {
                                @foreach (var product in Model)
                                {
                                    <div class="relative group bg-white rounded-lg shadow-md overflow-hidden transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1" data-id="@product.Id">
                                        <div class="relative h-48">
                                            <img src="@product.ImageUrl" alt="@product.Name" class="w-full h-full object-cover">
                                            <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity"></div>
                                        </div>
                                        <div class="p-3">
                                            <h3 class="text-sm font-semibold text-gray-800 mb-2">@product.Name</h3>
                                            <div class="flex justify-end space-x-2">
                                                <a href="/FeaturedProducts/Edit/@product.Id" class="inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-orange-700 bg-orange-100 hover:bg-orange-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                    </svg>
                                                    Editar
                                                </a>
                                                <button onclick="confirmDelete(@product.Id, '@product.Name')" class="inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                    </svg>
                                                    Eliminar
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal elegante para confirmación de eliminación -->
<div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-xl overflow-hidden max-w-md w-full transform transition-all duration-300 scale-100">
        <div class="bg-gradient-to-r from-red-500 to-pink-600 px-6 py-4">
            <h3 class="text-xl font-bold text-white">Confirmar Eliminación</h3>
        </div>
        <div class="p-6">
            <div class="mb-4">
                <p class="text-gray-700">¿Estás seguro de que deseas eliminar el producto destacado <span id="productName" class="font-semibold"></span>?</p>
                <p class="text-gray-500 text-sm mt-2">Esta acción no se puede deshacer.</p>
            </div>
            <div class="flex justify-end space-x-3">
                <button id="cancelDeleteBtn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-200 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-50">
                    Cancelar
                </button>
                <button id="confirmDeleteBtn" class="px-4 py-2 bg-gradient-to-r from-red-500 to-pink-600 text-white rounded-md hover:from-red-600 hover:to-pink-700 transition duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50">
                    Eliminar
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Notificación flotante -->
<div id="notification" class="fixed bottom-4 right-4 p-4 rounded-lg shadow-lg transform transition-all duration-500 translate-y-20 opacity-0 z-50">
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const deleteModal = document.getElementById('deleteModal');
            const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
            const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
            const notification = document.getElementById('notification');
            const productNameSpan = document.getElementById('productName');

            let currentProductId = null;
            let deleteInProgress = false;

            // Función para mostrar el modal de confirmación
            window.confirmDelete = function(id, name) {
                currentProductId = id;
                productNameSpan.textContent = name;

                // Mostrar el modal con animación
                deleteModal.classList.remove('hidden');
                setTimeout(() => {
                    const modalContent = deleteModal.querySelector('div');
                    modalContent.classList.remove('scale-95', 'opacity-0');
                    modalContent.classList.add('scale-100', 'opacity-100');
                }, 10);
            };

            // Evento para cancelar la eliminación
            cancelDeleteBtn.addEventListener('click', function() {
                hideDeleteModal();
            });

            // Evento para confirmar la eliminación
            confirmDeleteBtn.addEventListener('click', function() {
                if (deleteInProgress || !currentProductId) return;

                deleteInProgress = true;

                // Cambiar el botón a estado de carga
                const originalText = confirmDeleteBtn.innerHTML;
                confirmDeleteBtn.innerHTML = '<span class="inline-block animate-pulse">Eliminando...</span>';
                confirmDeleteBtn.disabled = true;

                // Obtener el token antifalsificación
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                // Crear los headers con el token
                const headers = new Headers({
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                });

                if (token) {
                    headers.append('RequestVerificationToken', token);
                }

                // Enviar la solicitud de eliminación
                fetch(`/FeaturedProducts/Delete/${currentProductId}`, {
                    method: 'POST',
                    headers: headers
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Error del servidor: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Ocultar el modal
                        hideDeleteModal();

                        // Eliminar el producto del DOM con animación
                        const productElement = document.querySelector(`[data-id="${currentProductId}"]`);
                        if (productElement) {
                            productElement.classList.add('scale-95', 'opacity-0');
                            setTimeout(() => {
                                productElement.remove();

                                // Verificar si no hay más productos
                                const featuredProducts = document.getElementById('featured-products');
                                if (featuredProducts.children.length === 0) {
                                    featuredProducts.innerHTML = `
                                        <div class="col-span-full text-center py-8 text-gray-500">
                                            No hay productos destacados. Haga clic en "Agregar Producto" para comenzar.
                                        </div>
                                    `;
                                }
                            }, 300);
                        }

                        // Mostrar notificación de éxito
                        showNotification('success', data.message || 'Producto destacado eliminado correctamente');
                    } else {
                        // Mostrar error
                        showNotification('error', data.message || 'Error al eliminar el producto');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('error', 'Error al eliminar el producto: ' + error.message);
                })
                .finally(() => {
                    // Restaurar el botón
                    confirmDeleteBtn.innerHTML = originalText;
                    confirmDeleteBtn.disabled = false;
                    deleteInProgress = false;
                    currentProductId = null;
                });
            });

            // Función para ocultar el modal
            function hideDeleteModal() {
                const modalContent = deleteModal.querySelector('div');
                modalContent.classList.remove('scale-100');
                modalContent.classList.add('scale-95');

                setTimeout(() => {
                    deleteModal.classList.add('hidden');
                }, 200);
            }

            // Función para mostrar notificaciones
            function showNotification(type, message) {
                // Configurar el estilo según el tipo
                notification.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg transform transition-all duration-500 z-50 ${
                    type === 'error' ? 'bg-red-500 text-white' : 'bg-green-500 text-white'
                }`;

                // Establecer el contenido
                notification.innerHTML = `
                    <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            ${type === 'error'
                                ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />'
                                : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />'}
                        </svg>
                        <span>${message}</span>
                    </div>
                `;

                // Mostrar la notificación con animación
                notification.classList.remove('translate-y-20', 'opacity-0');
                notification.classList.add('translate-y-0', 'opacity-100');

                // Ocultar después de 3 segundos
                setTimeout(() => {
                    notification.classList.remove('translate-y-0', 'opacity-100');
                    notification.classList.add('translate-y-20', 'opacity-0');
                }, 3000);
            }
        });
    </script>
}