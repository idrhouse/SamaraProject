@{
    ViewData["Title"] = "Administrar Carrusel - Feria Sámara Market";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gray-100 py-10">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h1 class="text-2xl font-bold text-gray-900 mb-6">Administrar Imágenes del Carrusel</h1>

            <!-- Área de carga de imágenes -->
            <div id="upload-area" class="border-2 border-dashed border-gray-300 rounded-lg p-8 mb-8 text-center hover:border-blue-500 transition-colors">
                <div class="space-y-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                    <p class="text-gray-600">Arrastra y suelta imágenes aquí o</p>
                    <label for="file-upload" class="relative cursor-pointer bg-blue-600 rounded-md font-medium text-white px-4 py-2 hover:bg-blue-700 focus-within:outline-none">
                        <span>Selecciona archivos</span>
                        <input id="file-upload" name="file-upload" type="file" class="sr-only" multiple accept="image/*">
                    </label>
                    <p class="text-xs text-gray-500">PNG, JPG, GIF hasta 5MB</p>
                </div>
            </div>

            <!-- Barra de progreso -->
            <div id="upload-progress" class="hidden w-full bg-gray-200 rounded-full h-2.5 mb-6">
                <div class="bg-blue-600 h-2.5 rounded-full" style="width: 0%"></div>
            </div>

            <!-- Lista de imágenes del carrusel -->
            <h2 class="text-xl font-semibold text-gray-800 mb-4">Imágenes actuales</h2>
            <div id="carousel-images" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                <!-- Las imágenes se cargarán aquí dinámicamente -->
                <div class="animate-pulse bg-gray-200 rounded-lg h-48"></div>
                <div class="animate-pulse bg-gray-200 rounded-lg h-48"></div>
                <div class="animate-pulse bg-gray-200 rounded-lg h-48"></div>
            </div>

            <!-- Botón para guardar cambios -->
            <div class="mt-8 flex justify-end">
                <button id="save-changes" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Guardar cambios
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const uploadArea = document.getElementById('upload-area');
            const fileInput = document.getElementById('file-upload');
            const progressBar = document.getElementById('upload-progress');
            const progressIndicator = progressBar.querySelector('div');
            const carouselImages = document.getElementById('carousel-images');
            const saveButton = document.getElementById('save-changes');

            let images = [];
            let reordered = false;

            // Cargar imágenes existentes
            loadExistingImages();

            // Eventos para drag & drop
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                uploadArea.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            ['dragenter', 'dragover'].forEach(eventName => {
                uploadArea.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                uploadArea.addEventListener(eventName, unhighlight, false);
            });

            function highlight() {
                uploadArea.classList.add('border-blue-500', 'bg-blue-50');
            }

            function unhighlight() {
                uploadArea.classList.remove('border-blue-500', 'bg-blue-50');
            }

            // Manejar el drop de archivos
            uploadArea.addEventListener('drop', handleDrop, false);

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                handleFiles(files);
            }

            // Manejar selección de archivos desde el input
            fileInput.addEventListener('change', function() {
                handleFiles(this.files);
            });

            function handleFiles(files) {
                files = [...files];

                // Mostrar barra de progreso
                progressBar.classList.remove('hidden');

                // Filtrar solo imágenes y verificar tamaño
                const validFiles = files.filter(file => {
                    if (!file.type.match('image.*')) {
                        alert(`El archivo "${file.name}" no es una imagen válida.`);
                        return false;
                    }
                    if (file.size > 5 * 1024 * 1024) {
                        alert(`La imagen "${file.name}" excede el tamaño máximo de 5MB.`);
                        return false;
                    }
                    return true;
                });

                if (validFiles.length === 0) {
                    progressBar.classList.add('hidden');
                    return;
                }

                // Subir archivos
                let uploaded = 0;
                validFiles.forEach(file => {
                    uploadFile(file, function() {
                        uploaded++;
                        const percent = (uploaded / validFiles.length) * 100;
                        progressIndicator.style.width = percent + '%';

                        if (uploaded === validFiles.length) {
                            setTimeout(() => {
                                progressBar.classList.add('hidden');
                            }, 1000);
                        }
                    });
                });
            }

            function uploadFile(file, onProgress) {
                const formData = new FormData();
                formData.append('file', file);

                fetch('/Admin/UploadCarouselImage', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al subir la imagen');
                    }
                    return response.json();
                })
                .then(data => {
                    // Añadir imagen a la lista
                    addImageToList(data);
                    onProgress();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error al subir la imagen: ' + error.message);
                    onProgress();
                });
            }

            function loadExistingImages() {
                fetch('/Admin/GetCarouselImages')
                .then(response => response.json())
                .then(data => {
                    // Limpiar el contenedor
                    carouselImages.innerHTML = '';

                    // Guardar las imágenes
                    images = data;

                    // Mostrar las imágenes
                    data.forEach(image => {
                        addImageToList(image, false);
                    });

                    // Inicializar sortable
                    initSortable();
                })
                .catch(error => {
                    console.error('Error al cargar imágenes:', error);
                    carouselImages.innerHTML = '<p class="text-red-500 col-span-full">Error al cargar las imágenes. Intente nuevamente.</p>';
                });
            }

            function addImageToList(image, isNew = true) {
                // Si es una imagen nueva, añadirla al array
                if (isNew) {
                    images.push(image);
                }

                const imageCard = document.createElement('div');
                imageCard.className = 'relative group bg-white rounded-lg shadow overflow-hidden';
                imageCard.dataset.id = image.id;

                imageCard.innerHTML = `
                    <div class="relative h-48">
                        <img src="${image.url}" alt="${image.alt || 'Imagen de carrusel'}" class="w-full h-full object-cover">
                        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity"></div>
                    </div>
                    <div class="p-3">
                        <input type="text" value="${image.alt || ''}" placeholder="Texto alternativo"
                               class="w-full p-1 border border-gray-300 rounded text-sm"
                               onchange="updateImageAlt(${image.id}, this.value)">
                    </div>
                    <button class="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity"
                            onclick="removeImage(${image.id})">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                    </button>
                    <div class="absolute top-2 left-2 bg-gray-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity cursor-move">
                        Arrastrar
                    </div>
                `;

                carouselImages.appendChild(imageCard);
            }

            // Función para inicializar el reordenamiento
            function initSortable() {
                // Usamos la librería Sortable.js que debe estar incluida en el layout
                if (typeof Sortable !== 'undefined') {
                    new Sortable(carouselImages, {
                        animation: 150,
                        ghostClass: 'bg-blue-100',
                        onEnd: function() {
                            reordered = true;
                            // Actualizar el orden de las imágenes en el array
                            const newOrder = Array.from(carouselImages.children).map(el => parseInt(el.dataset.id));
                            images = newOrder.map(id => images.find(img => img.id === id));
                        }
                    });
                }
            }

            // Función para actualizar el texto alternativo
            window.updateImageAlt = function(id, alt) {
                const image = images.find(img => img.id === id);
                if (image) {
                    image.alt = alt;
                }
            };

            // Función para eliminar una imagen
            window.removeImage = function(id) {
                if (confirm('¿Está seguro que desea eliminar esta imagen?')) {
                    // Eliminar del DOM
                    const imageElement = document.querySelector(`[data-id="${id}"]`);
                    if (imageElement) {
                        imageElement.remove();
                    }

                    // Eliminar del array
                    images = images.filter(img => img.id !== id);
                }
            };

            // Guardar cambios
            saveButton.addEventListener('click', function() {
                this.disabled = true;
                this.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Guardando...';

                fetch('/Admin/SaveCarouselImages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(images)
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al guardar los cambios');
                    }
                    return response.json();
                })
                .then(data => {
                    alert('Cambios guardados correctamente');
                    reordered = false;
                    loadExistingImages(); // Recargar para asegurar consistencia
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error al guardar los cambios: ' + error.message);
                })
                .finally(() => {
                    this.disabled = false;
                    this.innerHTML = 'Guardar cambios';
                });
            });

            // Advertir al usuario si intenta salir con cambios sin guardar
            window.addEventListener('beforeunload', function(e) {
                if (reordered) {
                    const message = 'Tiene cambios sin guardar. ¿Está seguro que desea salir?';
                    e.returnValue = message;
                    return message;
                }
            });
        });
    </script>
}