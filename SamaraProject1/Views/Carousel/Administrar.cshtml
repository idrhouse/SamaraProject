@model List<SamaraProject1.Models.CarouselImage>

@{
    ViewData["Title"] = "Administrar Carrusel - Feria Sámara Market";
}

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-6 sm:py-8 md:py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-7xl mx-auto">
        <div class="bg-white shadow-2xl rounded-3xl overflow-hidden">
            <div class="px-4 sm:px-6 md:px-8 py-4 sm:py-6 bg-gradient-to-r from-blue-500 to-indigo-600">
                <div class="flex flex-col sm:flex-row justify-between items-center">
                    <h1 class="text-2xl sm:text-3xl font-extrabold text-white mb-4 sm:mb-0">Administrar Carrusel</h1>
                    <a href="/Carousel/Add" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-indigo-600 bg-white hover:bg-indigo-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out">
                        <svg class="mr-2 -ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                        </svg>
                        Agregar Imagen
                    </a>
                </div>
            </div>

            <div class="p-4 sm:p-6 md:p-8 space-y-4 sm:space-y-6">
                @if (TempData["Error"] != null)
                {
                        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 sm:p-4 rounded-r-lg text-sm sm:text-base" role="alert">
                            <p class="font-bold">Error</p>
                            <p>@TempData["Error"]</p>
                        </div>
                }
                @if (TempData["Success"] != null)
                {
                        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-3 sm:p-4 rounded-r-lg text-sm sm:text-base" role="alert">
                            <p class="font-bold">Éxito</p>
                            <p>@TempData["Success"]</p>
                        </div>
                }

                <div class="bg-white rounded-xl shadow-md overflow-hidden">
                    <div class="p-6">
                        <h2 class="text-lg sm:text-xl font-bold text-gray-900 mb-4">Imágenes del Carrusel</h2>
                        <p class="text-sm text-gray-500 mb-4">Arrastra las imágenes para reordenarlas. Los cambios en el orden se guardarán automáticamente.</p>

                        <div id="carousel-images" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                            @if (Model == null || !Model.Any())
                            {
                                    <div class="col-span-full text-center py-8 text-gray-500">
                                        No hay imágenes en el carrusel. Haga clic en "Agregar Imagen" para comenzar.
                                    </div>
                            }
                            else
                            {
                                @foreach (var image in Model)
                                {
                                            <div class="relative group bg-white rounded-lg shadow-md overflow-hidden transform transition-all duration-300 hover:shadow-xl hover:-translate-y-1" data-id="@image.IdCarouselImage">
                                                <div class="relative h-48">
                                                    <img src="@image.Url" alt="@image.Alt" class="w-full h-full object-cover">
                                                    <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-opacity"></div>
                                                    <div class="absolute top-2 left-2 bg-gray-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity cursor-move">
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                                                        </svg>
                                                        Arrastrar
                                                    </div>
                                                </div>
                                                <div class="p-3">
                                                    <div class="flex justify-between items-center">
                                                        <span class="text-xs text-gray-500">Orden: @image.Order</span>
                                                        <div class="flex space-x-2">
                                                            <a href="/Carousel/Edit/@image.IdCarouselImage" class="inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-blue-700 bg-blue-100 hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                                </svg>
                                                                Editar
                                                            </a>
                                                            <button onclick="confirmDelete(@image.IdCarouselImage)" class="inline-flex items-center px-2 py-1 border border-transparent text-xs font-medium rounded text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                                </svg>
                                                                Eliminar
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal para confirmación de eliminación -->
<div id="confirmModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-sm w-full">
        <h2 class="text-lg font-bold text-gray-800 mb-4">¿Estás seguro?</h2>
        <p class="text-sm text-gray-600 mb-6">Esta acción eliminará la imagen del carrusel. ¿Deseas continuar?</p>
        <div class="flex justify-end space-x-3">
            <button id="cancelButton" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition duration-300 ease-in-out">
                Cancelar
            </button>
            <form id="deleteForm" method="post" action="/Carousel/Delete">
                @Html.AntiForgeryToken()
                <input type="hidden" id="deleteImageId" name="id" value="" />
                <button type="submit" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition duration-300 ease-in-out">
                    Eliminar
                </button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const carouselImages = document.getElementById('carousel-images');

                // Inicializar sortable si hay imágenes
                if (carouselImages.children.length > 0 && !carouselImages.querySelector('.col-span-full')) {
                    initSortable();
                }

                // Función para inicializar el reordenamiento
                function initSortable() {
                    new Sortable(carouselImages, {
                        animation: 150,
                        ghostClass: 'bg-blue-100',
                        onEnd: function() {
                            // Obtener el nuevo orden
                            const newOrder = Array.from(carouselImages.children).map(el => parseInt(el.dataset.id));

                            // Actualizar los números de orden visibles
                            updateOrderNumbers();

                            // Guardar el nuevo orden en el servidor
                            saveOrder(newOrder);
                        }
                    });
                }

                // Función para actualizar los números de orden visibles
                function updateOrderNumbers() {
                    const imageElements = carouselImages.querySelectorAll('[data-id]');
                    imageElements.forEach((el, index) => {
                        const orderSpan = el.querySelector('.text-xs.text-gray-500');
                        if (orderSpan) {
                            orderSpan.textContent = `Orden: ${index + 1}`;
                        }
                    });
                }

                // Función para guardar el nuevo orden
                function saveOrder(newOrder) {
                    // Obtener el token antifalsificación
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    const headers = {
                        'Content-Type': 'application/json',
                        ...(token ? { 'RequestVerificationToken': token } : {})
                    };

                    fetch('/Carousel/UpdateOrder', {
                        method: 'POST',
                        headers: headers,
                        body: JSON.stringify(newOrder)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Error al guardar el orden');
                        }
                        return response.json();
                    })
                    .then(data => {
                        showNotification('success', 'Orden actualizado correctamente');
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showNotification('error', 'Error al guardar el orden: ' + error.message);
                    });
                }
            });

            // Función para mostrar el modal de confirmación de eliminación
            function confirmDelete(id) {
                const modal = document.getElementById('confirmModal');
                const deleteImageId = document.getElementById('deleteImageId');
                const cancelButton = document.getElementById('cancelButton');

                deleteImageId.value = id;
                modal.classList.remove('hidden');

                cancelButton.addEventListener('click', function() {
                    modal.classList.add('hidden');
                });
            }

            // Función para mostrar notificaciones
            function showNotification(type, message) {
                // Crear elemento de notificación
                const notification = document.createElement('div');
                notification.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg transition-all duration-500 transform translate-y-0 opacity-100 ${type === 'error' ? 'bg-red-500 text-white' : 'bg-green-500 text-white'}`;
                notification.innerHTML = `
                    <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            ${type === 'error' 
                                ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />'
                                : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />'}
                        </svg>
                        <span>${message}</span>
                    </div>
                `;

                document.body.appendChild(notification);

                // Eliminar después de 3 segundos
                setTimeout(() => {
                    notification.classList.replace('translate-y-0', 'translate-y-10');
                    notification.classList.replace('opacity-100', 'opacity-0');
                    setTimeout(() => {
                        notification.remove();
                    }, 500);
                }, 3000);
            }
        </script>
}