@model SamaraProject1.Models.CarouselImage

@{
    ViewData["Title"] = "Editar Imagen del Carrusel - Feria Sámara Market";
}

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-3xl mx-auto bg-white shadow-2xl rounded-3xl overflow-hidden">
        <div class="px-8 py-6 bg-gradient-to-r from-blue-500 to-indigo-600">
            <div class="flex justify-between items-center">
                <h1 class="text-3xl font-extrabold text-white">Editar Imagen del Carrusel</h1>
                <a href="/Carousel/Administrar" class="inline-flex items-center px-3 py-2 border border-white text-white bg-transparent rounded-md font-medium text-sm transition-all duration-300 ease-in-out hover:bg-white hover:text-indigo-600 focus:outline-none focus:ring-2 focus:ring-white focus:ring-opacity-50">
                    <svg class="mr-2 -ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                    </svg>
                    Regresar
                </a>
            </div>
        </div>

        <div class="p-8 space-y-6">
            @if (TempData["Error"] != null)
            {
                <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-r-lg" role="alert">
                    <p class="font-bold">Error</p>
                    <p>@TempData["Error"]</p>
                </div>
            }
            @if (TempData["Success"] != null)
            {
                <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-r-lg" role="alert">
                    <p class="font-bold">Éxito</p>
                    <p>@TempData["Success"]</p>
                </div>
            }

            <div class="mb-6">
                <h2 class="text-lg font-medium text-gray-900 mb-2">Imagen Actual</h2>
                <div class="relative rounded-lg overflow-hidden h-64 bg-gray-100">
                    <img src="@Model.Url" alt="@Model.Alt" class="w-full h-full object-contain">
                </div>
            </div>

            <form method="post" enctype="multipart/form-data" action="/Carousel/Edit/@Model.IdCarouselImage" class="space-y-6">
                @Html.AntiForgeryToken()
                <input type="hidden" name="IdCarouselImage" value="@Model.IdCarouselImage" />
                <input type="hidden" name="Order" value="@Model.Order" />
                <input type="hidden" name="CreatedAt" value="@Model.CreatedAt" />
                <input type="hidden" name="Url" value="@Model.Url" />

                <div class="space-y-2">
                    <label for="alt" class="block text-sm font-medium text-gray-700">Texto Alternativo</label>
                    <input type="text" id="alt" name="Alt" value="@Model.Alt"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                           placeholder="Descripción de la imagen (opcional)">
                    <p class="text-xs text-gray-500">Este texto se mostrará si la imagen no puede cargarse y es importante para la accesibilidad.</p>
                </div>

                <div class="space-y-2">
                    <label for="image" class="block text-sm font-medium text-gray-700">Nueva Imagen (opcional)</label>
                    <div id="drop-area" class="mt-1 flex flex-col items-center justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md hover:bg-gray-50 transition-colors duration-200">
                        <div class="space-y-1 text-center">
                            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                            </svg>
                            <div class="flex text-sm text-gray-600">
                                <label for="image" class="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500">
                                    <span>Subir una nueva imagen</span>
                                    <input id="image" name="ImageFile" type="file" class="sr-only" accept="image/*">
                                </label>
                                <p class="pl-1">o arrastrar y soltar</p>
                            </div>
                            <p class="text-xs text-gray-500">PNG, JPG, GIF hasta 5MB</p>
                        </div>

                        <!-- Contenedor para la previsualización de la imagen -->
                        <div id="image-preview" class="mt-4 hidden">
                            <img id="preview-img" src="#" alt="Vista previa" class="max-h-48 rounded-lg shadow-md">
                            <button type="button" id="remove-image" class="mt-2 inline-flex items-center px-2.5 py-1.5 border border-transparent text-xs font-medium rounded text-red-700 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                Eliminar imagen
                            </button>
                        </div>
                    </div>
                    <p class="mt-2 text-sm text-gray-500">Deja este campo vacío para mantener la imagen actual.</p>
                </div>

                <div class="flex flex-col sm:flex-row justify-end space-y-3 sm:space-y-0 sm:space-x-3 pt-4">
                    <a href="/Carousel/Administrar" class="w-full sm:w-auto px-4 py-2 bg-gray-200 text-gray-700 rounded-lg text-center hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 transition duration-300 ease-in-out text-sm">
                        Cancelar
                    </a>
                    <button type="submit" class="w-full sm:w-auto px-6 py-2 bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-semibold rounded-lg shadow-md hover:from-blue-600 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-300 ease-in-out text-sm">
                        Guardar Cambios
                    </button>
                </div>
            </form>

            <div class="flex justify-between items-center pt-6 border-t border-gray-200 mt-6">
                <a href="/Carousel/Administrar" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-indigo-600 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    <svg class="mr-2 -ml-1 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                    </svg>
                    Regresar al Listado
                </a>
                <button id="deleteButton" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 transition duration-300 ease-in-out">
                    Eliminar
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para confirmación de eliminación -->
<div id="confirmModal" class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-sm w-full">
        <h2 class="text-lg font-bold text-gray-800 mb-4">¿Estás seguro?</h2>
        <p class="text-sm text-gray-600 mb-6">Esta acción eliminará la imagen del carrusel. ¿Deseas continuar?</p>
        <div class="flex justify-end space-x-3">
            <button id="cancelButton" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition duration-300 ease-in-out">
                Cancelar
            </button>
            <form id="deleteForm" method="post" action="/Carousel/Delete/@Model.IdCarouselImage">
                @Html.AntiForgeryToken()
                <button type="submit" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition duration-300 ease-in-out">
                    Eliminar
                </button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const dropArea = document.getElementById('drop-area');
            const fileInput = document.getElementById('image');
            const imagePreview = document.getElementById('image-preview');
            const previewImg = document.getElementById('preview-img');
            const removeButton = document.getElementById('remove-image');
            const deleteButton = document.getElementById('deleteButton');
            const cancelButton = document.getElementById('cancelButton');
            const confirmModal = document.getElementById('confirmModal');

            // Función para mostrar la previsualización de la imagen
            function showPreview(file) {
                if (file) {
                    const reader = new FileReader();

                    reader.onload = function(e) {
                        previewImg.src = e.target.result;
                        imagePreview.classList.remove('hidden');
                    }

                    reader.readAsDataURL(file);
                }
            }

            // Evento para cuando se selecciona un archivo mediante el input
            fileInput.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    showPreview(this.files[0]);
                }
            });

            // Eventos para arrastrar y soltar
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            ['dragenter', 'dragover'].forEach(eventName => {
                dropArea.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, unhighlight, false);
            });

            function highlight() {
                dropArea.classList.add('border-blue-500', 'bg-blue-50');
            }

            function unhighlight() {
                dropArea.classList.remove('border-blue-500', 'bg-blue-50');
            }

            // Manejar el evento de soltar archivos
            dropArea.addEventListener('drop', handleDrop, false);

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;

                if (files && files.length) {
                    fileInput.files = files;
                    showPreview(files[0]);
                }
            }

            // Botón para eliminar la imagen seleccionada
            removeButton.addEventListener('click', function() {
                fileInput.value = '';
                previewImg.src = '#';
                imagePreview.classList.add('hidden');
            });

            // Mostrar el modal de confirmación
            deleteButton.addEventListener('click', function() {
                confirmModal.classList.remove('hidden');
            });

            // Ocultar el modal sin eliminar
            cancelButton.addEventListener('click', function() {
                confirmModal.classList.add('hidden');
            });
        });
    </script>
}